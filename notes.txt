

ITGSend -a <receiver_ip> -T UDP -c 100 -C 10 -t 60000 -l sender.log -x receiver.log
ITGSend -a 10.0.0.1 -T UDP -c 100 -C 10 -t 60000 -l sender.log -x receiver.log

mininet> h1 ITGRecv &
mininet> h2 ITGSend -a 10.0.0.1 -T UDP -c 100 -C 10 -t 60000 -l sender.log -x receiver.log
     -c is packet size (default 512 bytes)
    -C packet send rate default is 1000 pkts/s
    -t duration in ms
...
mininet> h2 ITGDec receiver.log > receiver-decoded.txt

-k for itgsend 

h2 ITGDec sender.log -d 1000 delay.txt -p 1000 loss.txt -c 1000 avg.txt

ITGDec with -c <CT> [filename]  will give average stats 
  -c <CT> [filename]   Print all average metrics to file every <CT> milliseconds
                       (default filename: 'combined_stats.dat').

                       Dumps to file all the average metrics as sampled every <PT> milliseconds.
                       Each line of the output file respectively contains the follwing fields:
                       - "Time", "Bitrate", "Delay", "Jitter", "Packet loss"

    source: https://traffic.comics.unina.it/software/ITG/manual/index.html#SECTION00045000000000000000

with ditgsend, we can use a -Fs option to specify packet sizes of our choice. we can use 


Link capacities range the following values: 10, 40 or
100 kbps.

the receiver log has the useful information. 


def run_tests(net):
	from datetime import datetime
	
	h1, h2, h3, h4 = net.get('h1', 'h2', 'h3', 'h4')	
	timestamp = datetime.now().strftime('%Y-%m-%d-%H:%M:%S.%f')

	h1.cmd(f'ITGRecv &')
	h2.cmd(f'ITGSend -a 10.0.0.1 -T UDP -c 100 -C 10 -t 10000 -x itg/h2-receiver.log')


------------------------------------------------------------------------------------------------------------

RouteNet takes as input 
(i) a given topology,
(ii) a source-destination routing scheme (i.e., list of end-to-end paths)
(iii) a traffic matrix (defined as the bandwidth between each node pair in the network), 

and produces as output: 
performance metrics according to the current network state (per-path mean delay, jitter, and packet loss)

------------------------------------------------------------------------------------------------------------

roadmap

input: 	number of hosts, number of switches, "kind" of topology
to: 	topology generator 
output: topology description 
			(hosts, switches, links between switches, what switch a host is connected to, link speed between nodes)
		and 
		ONOS config file

input: 	mininet topology file & ONOS config file
to: 	mininet + ONOS + get-bandwidth.py
otuput: traffic matrix

input: 	mininet topology file + traffic matrix
to: 	main.py
output:	test file 