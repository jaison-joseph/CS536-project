import json
import argparse
import os

portMatrixFileName = 'portMatrix.txt'

def getCommandLineArgs():
    parser = argparse.ArgumentParser(description='Generate network topology and ONOS configuration')
    
    # Add arguments
    
    parser.add_argument('num_nodes', type=int,
    help='full path + name of the json file generated by main.py')
    
    parser.add_argument('flows_script_output_file', type=str,
                        help='Path to (including file) of the output of running the get_hops.sh script in ONOS')
    
    parser.add_argument('port_matrix_file_path', type=str,
                        help=f'path where the matrix file {portMatrixFileName} should be written to')

    # Parse arguments
    args = parser.parse_args()

    return args



'''
an entry in arr looks like:
{
    'id': '42784196903288196', 
    'tableId': '0', 
    'appId': 'org.onosproject.fwd',
    'groupId': 0,
    'priority': 10,
    'timeout': 10,
    'isPermanent': False, 
    'deviceId': 'of:0000000000000003', 
    'state': 'ADDED',
    'life': 20,
    'packets': 25,
    'bytes': 4096, 
    'liveType': 'UNKNOWN',
    'lastSeen': 1733195629390,
    'treatment': {
        'instructions': [{'type': 'OUTPUT', 'port': '1'}], 
        'deferred': []
    }, 
    'selector': {'criteria': [
        {'type': 'IN_PORT', 'port': 2}, 
        {'type': 'ETH_DST', 'mac': '00:00:00:00:00:05'},
        {'type': 'ETH_SRC', 'mac': '00:00:00:00:00:03'}
    ]}
}

['deviceId']
    who am I -> we know the source host number

['selector']['criteria'][0]['port']
    -> should be 1 to know that this is entry for host x sending to switch x

['selector']['criteria'][type='ETH_DST']['mac']
    -> should be MAC address of dest switch -> we know the target host

['treatment']['instructions'][0]['port']
    -> the output port

['treatment']['instructions'][0]['type'] must be 'OUTPUT'
'''
def run(numHosts: int, flowsFile: str, outputFilePath: str):
    flows = []
    lk = json.load(open(flowsFile))
    # print(len(lk['flows']))
    for i in range(len(lk['flows'])):
        # arr example: [{'type': 'OUTPUT', 'port': '1'}]
        # arr example: [{'type': 'OUTPUT', 'port': 'CONTROLLER'}]
        arr = lk['flows'][i]
        if \
        arr['treatment']['instructions'][0]['port'] != 'CONTROLLER' \
        and \
        len(arr['selector']['criteria']) == 3:
            # print(len(arr['selector']['criteria']), end=", ")
            # print(arr['selector']['criteria'])
            flows.append(arr)

    # print(len(flows))

    matrix = [[-1 for _ in range(numHosts)] for i in range(numHosts)]
    
    for arr in flows:
        try:
            # sorted order of arr['selector']['criteria']: 
            # [{'type': 'ETH_DST', 'mac': '00:00:00:00:00:05'}, {'type': 'ETH_SRC', 'mac': '00:00:00:00:00:03'}, {'type': 'IN_PORT', 'port': 2}]
            arr['selector']['criteria'].sort(key = lambda x: x['type'])
            
            assert [ arr['selector']['criteria'][i]['type'] for i in range(len(arr['selector']['criteria']))] == ['ETH_DST', 'ETH_SRC', 'IN_PORT']
            assert len(arr['treatment']['instructions']) == 1
            assert arr['treatment']['instructions'][0]['type'] == 'OUTPUT'
            
            destMacAddr = arr['selector']['criteria'][0]['mac']
            destHost = int(destMacAddr.replace(':', ''), 16) - 1 # because the mapping starts with s0 -> '00:00:00:00:00:01'
            
            srcMacAddr = arr['selector']['criteria'][1]['mac']
            # srcHost1 = int(arr['deviceId'][3:], 16) - 1
            # srcHost2 = int(srcMacAddr.replace(':', ''), 16) - 1
            # assert srcHost2 == srcHost1, f"[{srcHost1}, {srcHost2}]"
            
            srcHost = int(arr['deviceId'][3:], 16) - 1
            outputPort = int(arr['treatment']['instructions'][0]['port']) - 1 # the paper starts numbering ports with 0
            
            matrix[srcHost][destHost] = outputPort
        except AssertionError as e:
            continue

    missingCount = sum(row.count(-1) for row in matrix)
    print(f"{missingCount} missing entries in port matrix")
    # print()

    with open(
        os.path.join(outputFilePath, portMatrixFileName), 
        'w+'
    ) as f:
        for row in matrix:
            f.write(str(row)[1:-1].replace(' ', ''))
            f.write('\n')
    

def runner():
    args = getCommandLineArgs()
    try:
        run(args.num_nodes, args.flows_script_output_file, args.port_matrix_file_path)
    except Exception as e:
        print(f"Error parsing {args.flows_script_output_file}: {e}")

if __name__ == '__main__':
    runner()